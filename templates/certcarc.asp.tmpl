<HTML>
<Head>
    <Meta HTTP-Equiv="Content-Type" Content="text/html; charset=UTF-8">
    <Meta HTTP-Equiv="X-UA-Compatible" Content="IE=7">
    <Title>Microsoft Active Directory Certificate Services</Title>
</Head>
<Body BgColor=#FFFFFF Link=#0000FF VLink=#0000FF ALink=#0000FF><Font ID=locPageFont Face="Arial">

<Table Border=0 CellSpacing=0 CellPadding=4 Width=100% BgColor=#008080>
<TR>
	<TD><Font Color=#FFFFFF><LocID ID=locMSCertSrv><Font Face="Arial" Size=-1><B><I>Microsoft</I></B> Active Directory Certificate Services &nbsp;--&nbsp; ADCSInternalSubCA07 &nbsp;</Font></LocID></Font></TD>
	<TD ID=locHomeAlign Align=Right><A Href="/certsrv"><Font Color=#FFFFFF><LocID ID=locHomeLink><Font Face="Arial" Size=-1><B>Home</B></Font></LocID></Font></A></TD>
</TR>
</Table>



<Form Name=UIForm>
<P ID=locPageTitle2> <B> Download a CA Certificate, Certificate Chain, or CRL</B>
<!-- Green HR --><Table Border=0 CellSpacing=0 CellPadding=0 Width=100%><TR><TD BgColor=#008080><Img Src="certspc.gif" Alt="" Height=2 Width=1></TD></TR></Table>

<P>


    <LocID ID=locInstallNN>
    To trust certificates issued from this certification authority,
    <A Href="certnew.cer?ReqID=CACert&amp;Renewal=0&amp;Mode=inst&amp;Enc=b64"
	    OnMouseOver="window.status='Install this CA certificate';return true;"
	    OnMouseOut="window.status='';return true;"
	    >install this CA certificate</A>.
    </LocID>



<P>

<LocID ID=locPrompt>To download a CA certificate, certificate chain, or CRL, select the certificate and encoding method.</B></LocID>
<Table Border=0 CellSpacing=0 CellPadding=0>
	<TR> <!--establish column widths. -->
		<TD><Img Src="certspc.gif" Alt="" Height=1 Width=100></TD> <!-- label column, top border -->
		<TD RowSpan=59><Img Src="certspc.gif" Alt="" Height=1 Width=4></TD>                <!-- label spacing column -->
		<TD></TD>                                                                          <!-- field column -->
	</TR>

	<TR>
		<TD ID=locCaCertHead ColSpan=3><Font ID=Font_lbCaID Face="Arial" Size=-1><BR><Label For=lbCaID ID=Lable_lbCaID ><B>CA certificate:</B></Label></Font></TD>
	</TR>
	<TR><TD ColSpan=3 BgColor=#008080><Img Src="certspc.gif" Alt="" Height=2 Width=1></TD></TR>
	<TR><TD ColSpan=3><Img Src="certspc.gif" Alt="" Height=6 Width=1></TD></TR>
	<TR>
		<TD Align=Right VAlign=Top ID=locCaCertLabel></TD>
		<TD><Select Size=4 Name=lbCaInstance ID=lbCaID>
				<Option Value="0" Selected><LocID ID=locCurCertEntry>Current</LocID> <LocID ID=locCaNameNoRen1>[ADCSInternalSubCA07]</LocID>
			</Select>
		</TD>
	</TR>
	<TR><TD ColSpan=3><Img Src="certspc.gif" Alt="" Height=4 Width=1></TD></TR>

	<TR>
		<TD ID=locEncodingHead ColSpan=3><Font Face="Arial" Size=-1><BR><B>Encoding method:</B></Font></TD>
	</TR>
	<TR><TD ColSpan=3 BgColor=#008080><Img Src="certspc.gif" Alt="" Height=2 Width=1></TD></TR>
	<TR><TD ColSpan=3><Img Src="certspc.gif" Alt="" Height=6 Width=1></TD></TR>
	<TR><TD></TD>
		<TD><Font ID=locEncDerFont Face="Arial">
			<Input Type=Radio ID=rbDerEnc Name=rbEncoding Checked><Label For=rbDerEnc ID=locDerEnc0>DER</Label>
			</Font>
		</TD>
	</TR>
	<TR><TD></TD>
		<TD><Font ID=locEncB64Font Face="Arial">
			<Input Type=Radio ID=rbB64Enc Name=rbEncoding><Label For=rbB64Enc ID=locB64Enc0>Base 64</Label>
			</Font>
		</TD>
	</TR>
	<TR><TD ColSpan=3><Img Src="certspc.gif" Alt="" Height=6 Width=1></TD></TR>
</Table>
	
<Table CellSpacing=0 CellPadding=0>
	<TR><TD></TD>
		<TD><Font ID=locInstCaCFont Face="Arial">
			<A Href="#"
				OnContextMenu="return false;"
				OnMouseOver="window.status='Install CA certificate'; return true;" 
				OnMouseOut="window.status=''; return true;" 
				OnClick="handleInstCert();return false;">
			<LocID ID=locInstallCert>Install CA certificate</LocID></A></Font>
		</TD>
	</TR>
	<TR><TD ColSpan=3 Height=3></TD></TR>

	<TR><TD></TD>
		<TD><Font ID=locDlCaCFont2 Face="Arial">
			<A Href="#"
				OnContextMenu="return false;"
				OnMouseOver="window.status='Download CA certificate'; return true;" 
				OnMouseOut="window.status=''; return true;" 
				OnClick="handleGetCert();return false;">
			<LocID ID=locDownloadCert2>Download CA certificate</LocID></A></Font>
		</TD>
	</TR>
	<TR><TD ColSpan=3 Height=3></TD></TR>

	<TR><TD></TD>
		<TD><Font ID=locDlCaCpFont2 Face="Arial">
			<A Href="#"
				OnContextMenu="return false;"
				OnMouseOver="window.status='Download CA certificate chain'; return true;" 
				OnMouseOut="window.status=''; return true;" 
				OnClick="handleGetChain();return false;">
			<LocID ID=locDownloadCertChain2>Download CA certificate chain</LocID></A></Font>
		</TD>
	</TR>
	<TR><TD ColSpan=3 Height=3></TD></TR>

	<TR><TD></TD>
		<TD><Font ID=locDlBaseCrlFont2 Face="Arial">
			<A Href="#"
				OnContextMenu="return false;"
				OnMouseOver="window.status='Download latest base CRL'; return true;" 
				OnMouseOut="window.status=''; return true;" 
				OnClick="handleGetBaseCrl();return false;">
			<LocID ID=locDownloadBaseCRL2>Download latest base CRL</LocID></A></Font>
		</TD>
	</TR>
	<TR><TD ColSpan=3 Height=3></TD></TR>



</Table>
	

<BR>
	
<!-- Green HR --><Table Border=0 CellSpacing=0 CellPadding=0 Width=100%><TR><TD BgColor=#008080><Img Src="certspc.gif" Alt="" Height=2 Width=1></TD></TR></Table>
<!-- White HR --><Table Border=0 CellSpacing=0 CellPadding=0 Width=100%><TR><TD BgColor=#FFFFFF><Img Src="certspc.gif" Alt="" Height=5 Width=1></TD></TR></Table>

</Form>
</Font>
<!-- ############################################################ -->
<!-- End of standard text. Scripts follow  -->
	
<Script Language="VBSCRIPT">

    Const ContextUser       = 1
    Const ContextMachine    = 2

    Const CR_OUT_BASE64HEADER   = &H00000000
    Const CR_OUT_BASE64         = &H00000001
    Const CR_OUT_BINARY         = &H00000002
    Const CRYPT_STRING_ANY      = &H00000007
    Const CR_OUT_CHAIN          = &H00000100
    Const FR_PROP_FULLRESPONSE  = &H00000001
    Const PROPTYPE_BINARY       = &H00000003

    Const CERT_DATA_ENCIPHERMENT_KEY_USAGE    = &H10
    Const CERT_KEY_ENCIPHERMENT_KEY_USAGE     = &H20
    Const CERT_NON_REPUDIATION_KEY_USAGE      = &H40
    Const CERT_DIGITAL_SIGNATURE_KEY_USAGE    = &H80

    Const CERT_SYSTEM_STORE_LOCAL_MACHINE     = &H20000

    Const CRYPT_MACHINE_KEYSET                = &H20

    Const XECT_EXTENSION_V1 = 1

    Const XCN_CRYPT_UNKNOWN_INTERFACE           = 0
    Const XCN_NCRYPT_ALLOW_EXPORT_FLAG          = 1
    Const XCN_CRYPT_HASH_INTERFACE              = 2
    Const XCN_CRYPT_SECRET_AGREEMENT_INTERFACE  = 4
    Const XCN_CRYPT_SIGNATURE_INTERFACE		= 5

    Const XCN_NCRYPT_UI_NO_PROTECTION_FLAG      = 0
    Const XCN_NCRYPT_UI_PROTECT_KEY_FLAG        = 1
    

    Const szOID_PKIX_KP_CODE_SIGNING            = "1.3.6.1.5.5.7.3.3"
    Const SPC_INDIVIDUAL_SP_KEY_PURPOSE_OBJID   = "1.3.6.1.4.1.311.2.1.21"
    Const SPC_COMMERCIAL_SP_KEY_PURPOSE_OBJID   = "1.3.6.1.4.1.311.2.1.22"


    Const CERTENROLL_INDEX_BASE = 0

    Const PROV_SSL           = 6
    Const PROV_RSA_SCHANNEL  = 12

    Const AllowNone = 0

    Const AlgorithmFlagsNone = 0

</SCRIPT>
<Script Language="JavaScript">

    //
    // Implement the GenKeyFlags routine in Javascript 
    // because its easier to perform bitwise manipulation
    // 
    
    function XEp_SetGenKeyFlags(objPrivateKey, nGenKeyFlags)
    {
        
     
    }
    
</script>

<Script Language="VBSCRIPT">


    
    '----------------------------------------------------------------------
    '
    ' ENROLLMENT OBJECT PROXIES
    '
    ' Routines which operate on either
    ' 
    ' a) an instance of the IX509Enrollment interface (Longhorn+)
    ' or b) xenroll (downlevels)
    '
    '----------------------------------------------------------------------

    Function XE_Enroll_AcceptResponse(objEnroll, sPKCS7, bMachine)
    
        
            
            If True = bMachine Then
                objEnroll.MyStoreFlags        = CERT_SYSTEM_STORE_LOCAL_MACHINE
			    objEnroll.RequestStoreFlags   = CERT_SYSTEM_STORE_LOCAL_MACHINE
			    objEnroll.RootStoreFlags      = CERT_SYSTEM_STORE_LOCAL_MACHINE
			    objEnroll.CAStoreFlags        = CERT_SYSTEM_STORE_LOCAL_MACHINE
            End If
            
		    objEnroll.SPCFileName=""
		    objEnroll.acceptResponse(sPKCS7)

          ' True=bLH    
    
    End Function 

    Function XE_Enroll_addFriendlyNameToRequest(objEnroll, sName)

        
                    
            Const CERT_FRIENDLY_NAME_PROP_ID    = 11
			Const XECP_STRING_PROPERTY          = 1

			Call objEnroll.addBlobPropertyToCertificate(CERT_FRIENDLY_NAME_PROP_ID, XECP_STRING_PROPERTY, document.UIForm.tbFriendlyName.value)

           

    End Function 

    Function XE_Enroll_CreateRequest(objEnroll, lFlags, sDistinguishedName, sCertUsage)
        
        
        
            XE_Enroll_CreateRequest = objEnroll.CreateRequest(lFlags, sDistinguishedName, sCertUsage)
            
        
        
    End Function
         
    Function XE_Enroll_InstallPKCS7Ex(objEnroll, sPKCS7)
        
        
        
            XE_Enroll_InstallPKCS7Ex = objEnroll.InstallPKCS7Ex(sPKCS7)
            
        
    
    End Function     
    
    
    '----------------------------------------------------------------------
    '
    ' PRIVATEKEY OBJECT PROXIES
    '
    ' Routines which operate on either
    ' 
    ' a) an instance of the IX509PrivateKey interface (Longhorn+)
    ' or b) xenroll (downlevels)
    '
    '----------------------------------------------------------------------

    Function XE_PrivateKey_GetKeyLenEx(objPrivateKey, nSizeSpec, nKeySpec)

        
        
            XE_PrivateKey_GetKeyLenEx = objPrivateKey.GetKeyLenEx(nSizeSpec, nKeySpec)
        
            
        
    End Function

    Function XE_PrivateKey_SetProviderNameAndType(  _
                    objPrivateKey,  _
                    sProviderName,  _
                    nProviderType   _
                    )

        
        
            objPrivateKey.ProviderName = sProviderName
            objPrivateKey.ProviderType = nProviderType            
            
          ' True=bLH    

    End Function

    '----------------------------------------------------------------------
    '
    ' REQUEST OBJECT PROXIES
    '
    ' Routines which operate on either
    ' 
    ' a) an instance of the IX509CertificateRequestPKCS10 interface (Longhorn+)
    ' or b) xenroll (downlevels)
    '
    '----------------------------------------------------------------------

    Function XE_Request_addCertTypeToRequestEx( _
                        objRequest,             _
                        nType,                  _
                        sOIDOrName,             _
                        nMajorVersion,          _
                        bMinorVersion,          _
                        nMinorVersion           _
                        )
    
        
        
            Call objRequest.addCertTypeToRequestEx(nType, sOIDOrName, nMajorVersion, bMinorVersion, nMinorVersion)

           
        
    End Function

    Function XE_Request_AddDistinguishedName(objRequest, sDN)

        

            ' Nothing to do here -- XENROLL does this in the CreateRequest call

        

    End Function

    Function XE_Request_AddEKUToRequest(objRequest, sCertUsage)

        
        
            '
            ' Nothing to do in the non-LH case
            '
            
                
    
    End Function 
    

    Function XE_Request_EnableSMIMECapabilities(objRequest, bEnable)
    
        

            objRequest.EnableSMIMECapabilities = bEnable
            
           
                
    End Function 


    Function XE_Request_GetSupportedKeySpec(objPrivateKey)
    
        
        
            Dim nSupportedKeyUsages
            
            nSupportedKeyUsages = objPrivateKey.GetSupportedKeySpec()
		    
		    if 0 = nSupportedKeyUsages Then
			    nSupportedKeyUsages = AT_SIGNATURE And AT_KEYEXCHANGE
		    End If 
            
            XE_Request_GetSupportedKeySpec = nSupportedKeyUsages
        
          ' True=bLH    

    End Function

    Function XE_Request_InitializeCspInformation(   _
                    objRequest,     _
                    objPrivateKey,  _
                    bMachine,       _
                    nKeySpec,       _
                    nGenKeyFlags,   _
                    sProviderName,  _
                    nProviderType,  _
                    sContainerName, _
                    bReuseKey       _
                    )

        

            objRequest.UseExistingKeySet = bReuseKey
            objRequest.ProviderName = sProviderName
            objRequest.ProviderType = nProviderType
            objRequest.GenKeyFlags = nGenKeyFlags

            If Not 0=nKeySpec Then
            objRequest.KeySpec = nKeySpec
            End If

            If bReuseKey Then
            objRequest.ContainerName = sContainerName
            Else
            If Not ""=sContainerName Then
            objRequest.ContainerName = sContainerName
            End If
            End If

            If bMachine Then
            objRequest.RequestStoreFlags = CERT_SYSTEM_STORE_LOCAL_MACHINE
            objRequest.ProviderFlags = CRYPT_MACHINE_KEYSET
            End If
            
         ' True=bLH

          If 0<>Err.Number Then
          XE_Request_InitializeCspInformation = Err.Number
          Exit Function
          Else
          XE_Request_InitializeCspInformation = 0
          End If
          End Function


              Function  XE_Request_LimitExchangeKeyToEncipherment(objRequest, bLimitToEncipherment, nKeySpec)

              

            objRequest.LimitExchangeKeyToEncipherment = bLimitToEncipherment
            
           
        
    End Function 


    Function XE_Request_SetHashAlgorithm(objRequest, vHashAlgorithm)
    
        
        
            objRequest.HashAlgID = vHashAlgorithm
            
        
    
    End Function 
   

    '----------------------------------------------------------------------
    '
    ' CMC OBJECT PROXIES
    '
    ' Routines which operate on either
    ' 
    ' a) an instance of the IX509CertificateRequestCMC interface (Longhorn+)
    ' or b) xenroll (downlevels)
    '
    '----------------------------------------------------------------------
    
    Function XE_CMC_SetArchivalCertificate(objCMC, sCAExchangeCert)
    
                

            objCMC.PrivateKeyArchiveCertificate = sCAExchangeCert
            XE_CMC_SetArchivalCertificate = Err.Number
            
        
        
    
    End Function 

    '----------------------------------------------------------------------
    '
    ' GENERAL UTILITY ROUTINES
    '
    '----------------------------------------------------------------------

    Function XE_GetProviderType(sProviderName)
    
        
        
            XE_GetProviderType = g_objEnroll.getProviderType(sProviderName)
            
          ' True=bLH    
        
    End Function

    Function XE_InitializeEnrollObject(objRequest)
    
        
        
    End Function 

    Function XE_InitializeCmcObject()

        

    End Function

    Function XE_LegacyCsp(sProviderName)

        

            XE_LegacyCsp = True

        
      
    End Function

    Function XE_reset()

        

            g_objEnroll.reset()

        
    
    End Function 
				

    Function XE_ReuseHardwareKeyIfUnableToGenNew(bReuse) 

        

            g_objEnroll.ReuseHardwareKeyIfUnableToGenNew = bReuse

           
        
    End Function

</Script>


<Script Language="JavaScript">
	//----------------------------------------------------------------
	// convert a (signed) number into a (unsigned) hex string
	function toHex(number) {
		var sRight=(number&0x0FFFFFFF).toString(16).toUpperCase();
		sRight="0000000".substring(0, 7-sRight.length)+sRight;
		return ((number>>28)&0x0000000F).toString(16).toUpperCase()+sRight;
	}

</Script>



   
    <Script Language="JavaScript">
        //----------------------------------------------------------------
        // Show the message in the status bar and in the middle of the screen (DHTML only)
        function ShowTransientMessage(sMessage) {
	        window.status=sMessage;

	        
        }

        //----------------------------------------------------------------
        // hide the message box
        function HideTransientMessage() {
	        window.status="";
	        
	        
        }
    </Script>

    

<Script Language="JavaScript">
	//================================================================
	// PAGE GLOBAL VARIABLES

	// constants
	var CRL_AVAILABLE=3; // == CA_DISP_VALID

	// CA state information
	var nRenewals={{ .Renewals }};
	var rgCrlState=new Array(
		3
		);



	//================================================================
	// LINK HANDLERS

	//----------------------------------------------------------------
	// Get the requested cert
	function handleGetCert() {
		location="certnew.cer?ReqID=CACert&Renewal="+getChosenRenewal()+"&"+getEncoding();
	}
	//----------------------------------------------------------------
	// Install the requested cert
	function handleInstCert() {
		location="certnew.cer?ReqID=CACert&Renewal="+getChosenRenewal()+"&Mode=inst&Enc=b64";
	}
	//----------------------------------------------------------------
	// Get the requested certificate chain
	function handleGetChain() {
		location="certnew.p7b?ReqID=CACert&Renewal="+getChosenRenewal()+"&"+getEncoding();
	}
	//----------------------------------------------------------------
	// Get the nearest valid Base CRL
	function handleGetBaseCrl() {
		var nSource=getChosenRenewal();
		while (nSource>0 && CRL_AVAILABLE!=rgCrlState[nSource]) {
			nSource--;
		}
		location="certcrl.crl?Type=base&Renewal="+nSource+"&"+getEncoding();
	}
	//----------------------------------------------------------------
	// Get the nearest valid Delta CRL
	function handleGetDeltaCrl() {
		var nSource=getChosenRenewal();
		while (nSource>0 && CRL_AVAILABLE!=rgCrlState[nSource]) {
			nSource--;
		}
		location="certcrl.crl?Type=delta&Renewal="+nSource+"&"+getEncoding();
	}
	//----------------------------------------------------------------
	// Return the renewal # of the currently chosen cert
	function getChosenRenewal() {
		return nRenewals-document.UIForm.lbCaInstance[document.UIForm.lbCaInstance.selectedIndex].value;
	}
	//----------------------------------------------------------------
	// Return the encoding parameter based upon the radio button
	function getEncoding() {
		if (true==document.UIForm.rbEncoding[0].checked) {
			return "Enc=bin";
		} else {
			return "Enc=b64";
		}
	}



</Script>



</Body>
</HTML>

